<template>
  <div class="fun_wrap" :style="{background: '#f0f3f4', marginLeft: '0px'}">
      <el-container v-bind:style="{height: wrapHeight + 'px',position: 'relative'}">
          <el-aside v-show="carTreeIsShow" id="orgTreeBox" v-bind:style="{width: '230px', marginTop: '-20px', boxShadow: '1px -2px 3px 0px #dcdfe6', background: '#f9f9f9'}">
            <el-tabs id="carMonitor_tabs" v-model="carTreeTabSelect" v-bind:style="{marginTop: '10px'}">
                <el-tab-pane label="所有车辆" name="first">
                    <div style="margin: 25px 0 15px 0;">
                        <el-autocomplete id="carMonitor_cartree_searinput" size="mini" clearable placeholder="请输入内容" v-model="carTreeSearInput" class="input-with-select" :fetch-suggestions="carTreeComplteInputSear" @select="carTreeDataSelect" >
                            <el-select v-model="carTreeSearSelect" @change="carTreeSearSelectEvent" slot="prepend">
                                <el-option label="车牌号" value="carNo"></el-option>
                                <el-option label="SIM卡号" value="actualSimNo"></el-option>
                                <el-option label="终端号" value="tboxId"></el-option>
                                <el-option label="VIN码" value="carVin"></el-option>
                            </el-select>
                            <el-button slot="append" @click="carTreeSearIconEvent" icon="el-icon-search"></el-button>
                        </el-autocomplete>
                        <span @click="showTreeConfig" :style="{fontSize: '18px', cursor: 'pointer', verticalAlign: 'middle'}" class="el-icon-setting"></span>
                    </div>
                    <EasyScrollbar>
                        <div>
                            <ul class="ztree" v-bind:style="{display: 'table'}" id="car_monitor_tree"></ul>
                        </div>
                    </EasyScrollbar>
                </el-tab-pane>
                <el-tab-pane label="关注车辆" name="second">
                    关注车辆
                </el-tab-pane>
            </el-tabs>
          </el-aside>
          <div v-show="!carTreeIsShow" @click="openCarTree" class="car_moni_tree_open">
             <img src="static/img/orgtreeshow_icon.png" alt="">
          </div>
          <el-container v-bind:style="{minWidth: '850px'}" class="car_monitor_right">
              <el-main ref="hqMapDivRef">
                  <!-- AMap -->
                  <hq-map :mapStyle="mapStyle"></hq-map>
              </el-main>
              <el-footer :style="{height: 'auto', position: 'relative'}">
                  <div :style="{position: 'absolute', top: '0', left: '50%', marginLeft: '-74px', cursor: 'pointer'}">
                      <img @click="hideCarTable" src="static/img/carMonitor/table_down.png" alt="">
                      <img @click="openCarTable" src="static/img/carMonitor/table_up.png" alt="">
                  </div>
                  <el-tabs v-show="isCarTableShow" class="myTabs_wrap" v-model="tabSelect" :style="{marginTop: '10px'}">
                    <el-tab-pane label="传统车" name="normal">
                        <el-table ref="car_moni_nortable" :height="tabTableHeight" tooltip-effect="dark" :stripe="true" size="mini" highlight-current-row :border="true">
                            <el-table-column :show-overflow-tooltip="showTipFlg" width="34" header-align="left" type="selection" label=""></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" width="52" header-align="left" type="index" label="序号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="carVin" label="VIN码"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="productionDate" label="生产日期"> </el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="tboxId" label="终端号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="actualSimNo" label="SIM卡号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="iccid" label="ICCID"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="createTime" label="创建时间"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="createUserName" label="创建者"></el-table-column>
                        </el-table>
                        <el-row :span="24">
                            <el-col :span="20" :offset="2" :style="{textAlign: 'center'}">
                                <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="[15, 20, 30, 50]" :page-size="pageSize" layout="total, sizes, prev, pager, next, jumper" background :total="TotalPages">
                                </el-pagination>
                            </el-col>
                        </el-row>
                    </el-tab-pane>
                    <el-tab-pane label="新能源车" name="energy">
                        <el-table ref="car_moni_enertable" :height="tabTableHeight" tooltip-effect="dark" :stripe="true" size="mini" highlight-current-row :border="true">
                            <el-table-column :show-overflow-tooltip="showTipFlg" width="34" header-align="left" type="selection" label=""></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" width="52" header-align="left" type="index" label="序号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="carVin" label="VIN码"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="productionDate" label="生产日期"> </el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="tboxId" label="终端号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="actualSimNo" label="SIM卡号"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="iccid" label="ICCID"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="createTime" label="创建时间"></el-table-column>
                            <el-table-column :show-overflow-tooltip="showTipFlg" header-align="left" prop="createUserName" label="创建者"></el-table-column>
                        </el-table>
                        <el-row :span="24">
                            <el-col :span="20" :offset="2" :style="{textAlign: 'center'}">
                                <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page="currentPage" :page-sizes="[15, 20, 30, 50]" :page-size="pageSize" layout="total, sizes, prev, pager, next, jumper" background :total="TotalPages">
                                </el-pagination>
                            </el-col>
                        </el-row>
                    </el-tab-pane>

                  </el-tabs>

              </el-footer>
              <div v-show="carTreeIsShow" @click="hideCarTree" class="car_moni_tree_close">
                 <img src="static/img/orgtreehide_icon.png" alt="">
              </div>
          </el-container>

          <!-- 树配置 -->
          <tree-config @loadTreeByConfig="loadTreeByConfig" :treeConfigVisible="treeConfigVisible" v-on:parentEvent="resetTreeConfigVsible"></tree-config>
      </el-container>

  </div>
</template>
<script>
import axios from 'axios'
import router from 'router/index'
import treeConfig from './treeConfig'
import hqMap from 'components/HQMap'
import api from 'api/carMonitor'
export default {
    components: {
        // 车辆树配置
        treeConfig,
        // 地图部分
        hqMap
    },

    data(){
        return {

            // 车辆树配置属性 start
            treeConfigVisible: false,
            // 车辆树配置属性 end
            mapStyle: 'height: 602px',
            showTipFlg: true,
            form: {},

            wrapHeight: 802,
            carTreeTabSelect: 'first',
            tabSelect: 'normal',
            tabTableHeight: 200,
            carTreeIsShow: true,
            autoCarTreeStaTimer: null,
            currentPage: 1,
            pageSize: 15,
            TotalPages: 100,
            isCarTableShow: true,
            carTreeSearInput: '',
            carTreeSearSelect: 'carNo',
            carTreeExpandPathArr: [],
            carTreeSetting: {
                check: {
                    enable: true,
                    chkStyle: "checkbox"
                },
                async: {
                    enable: true,
                    url: axios.defaults.baseURL + '/tree/userOrgTree',
                    type: "get",
                    dataFilter: this.carTreeDataFilter,
                    autoParam: ["id=parentNodeId"]
                },
                callback: {
                    onAsyncSuccess: this.carTreeOnSuccesEvent
                }
            },
            TreeRootData: [{
                "checked":"false",
                "children":[],
                "icon":"",
                "iconClose":"",
                "iconOpen":"",
                "id":"-1",
                "tId":"-1",
                "isParent":"true",
                "name":"车辆监控中心",
                "open":"false",
                "parentTId":"0",
                "type":0
            }]

        }
    },
    created() {
        this.wrapHeight = this.$store.state.home.settings.deviceHeight - 22;
    },
    mounted() {
        var carTree = $.fn.zTree.init($("#car_monitor_tree"), this.carTreeSetting, this.TreeRootData);
        var treeNodeS = carTree.getNodes()

        carTree.expandNode(treeNodeS[0], true)
        $('#carMonitor_tabs .easy-scrollbar__wrap').height(this.wrapHeight - 65)

        this.autoFreshCartreeStaAndNum()

        this.getCartreeStateAndNum()

    },
    watch: {
        isCarTableShow(newVal, oldVal) {
            let h = 500

            if(newVal && newVal != oldVal) {
                h = this.wrapHeight - this.tabTableHeight
            } else {
                h = this.wrapHeight
            }
            this.resetMapStyle(h)
        }
    },
    methods: {
        loadTreeByConfig() {
            console.log('loadTreeByConfig')
        },
        getTableData(){
            let data = {
                pageNum: this.currentPage,
                pageSize: this.pageSize
            }

            console.log(data)
        },
        handleCurrentChange(val) {
            this.currentPage = val
            this.getTableData()
        },
        handleSizeChange(val) {
            this.pageSize = val
            this.getTableData()
        },
        showTreeConfig() {
            this.treeConfigVisible = true
            console.log(this.treeConfigVisible)
        },
        resetMapStyle(h) {
            this.mapStyle = 'height: ' + h + 'px'
        },
        resetTreeConfigVsible(val) {
            console.log('子组件传值：' + val)
            this.treeConfigVisible = val
        },

        hideCarTable(){
            this.isCarTableShow = false
        },
        openCarTable(){
            this.isCarTableShow = true
        },
        hideCarTree(){
            this.carTreeIsShow = false
        },
        openCarTree(){
            this.carTreeIsShow = true
        },
        // *************************************************************************车辆树逻辑


        carTreeDataFilter(treeId, parentNode, responseData){                     //异步加载车辆树数据过滤
            if(responseData.code && responseData.code == '401'){
                this.$message({
                    type: 'error',
                    duration: 1500,
                    showClose: true,
                    message: responseData.message
                });
                router.push({path:'/login'})
            }else{
                return responseData
            }
        },
         // *************************************************************************车辆树状态
        autoFreshCartreeStaAndNum(){
            var that = this

            if(this.autoCarTreeStaTimer){
                clearInterval(this.autoCarTreeStaTimer)
            }
            this.autoCarTreeStaTimer = window.setInterval(function(){
                that.getCartreeStateAndNum()

            }, 5000)

        },

        getCartreeStateAndNum(){
            var cartree = $.fn.zTree.getZTreeObj("car_monitor_tree")
            var nodes = cartree.getNodes()

            nodes = cartree.transformToArray(nodes)

            var resArr = []

            if(nodes.length > 0){
                for(var item of nodes){
                    if(item.isParent){
                        resArr.push(item.id)
                    }
                }
            }

            var obj = {
                nodeIds: JSON.stringify(resArr),
                treeType: 1
            }

            api.getCarTreeStateAndNum(obj).then((response) =>{

                if(response.data.orgNumUpdate){
                    var orgnumArr =  response.data.orgNums

                    if(orgnumArr instanceof Array){
                        for(var itemnum of orgnumArr){
                            var itemnumspli = itemnum.split("|")
                            var nodeid = itemnumspli[0]
                            var itemnumStr = itemnumspli[1]
                            var itemnumArr = itemnumStr.split("_")

                            var carTatNum = itemnumArr[0]    //总车辆数
                            var carOffNum = itemnumArr[1]    //离线车辆数
                            var carUnknNum = itemnumArr[2]    //未知车辆数
                            // var carStopOnlineNum = itemnumArr[3]    //停车在线车辆数

                            var carOnlineNum = carTatNum - carOffNum - carUnknNum

                            var treeNode = cartree.getNodeByParam('id', nodeid, null)

                            if(treeNode){
                                var baseName = treeNode.name.split("[")[0]

                                treeNode.name = baseName + "[ " + carOnlineNum + " / " + carTatNum + "]"

                                cartree.updateNode(treeNode)
                            }
                        }

                    }


                }


            }).catch(err =>{
                this.$message({
                    type: 'error',
                    duration: 1500,
                    showClose: true,
                    message: err.message
                });
            })

        },
        // *************************************************************************车辆树搜索
        carTreeSearSelectEvent(){
            $('#carMonitor_cartree_searinput>div>.el-input__inner').focus()
        },
        carTreeSearIconEvent(){
            $('#carMonitor_cartree_searinput>div>.el-input__inner').focus()
        },
        carTreeDataSelect(cbdata){
            var cartree = $.fn.zTree.getZTreeObj("car_monitor_tree")

            return this.getCarTreeNodePath(cbdata).then((dataStr) => {

                var pathArr = []

                if(dataStr){
                    pathArr = dataStr.split("_")

                    this.carTreeExpandPathArr = pathArr
                    var firstPnodeid = pathArr[0]
                    var firstPnode = cartree.getNodeByParam("id", firstPnodeid, null)

                    if(firstPnode){
                        cartree.expandNode(firstPnode, true)
                    }
                    // console.log(pathArr)
                    // var carNodeid = pathArr[pathArr.length - 1]

                    // for(var item of pathArr){
                    //     var node = cartree.getNodeByParam("id", item, null)

                    //     console.log(node)

                    //     if(node){
                    //         cartree.expandNode(node, true)
                    //         if(node.id == carNodeid){
                    //             cartree.selectNode(node)
                    //         }
                    //     }
                    // }
                }

            })
        },
        carTreeOnSuccesEvent(event, treeId, treeNode){
            var cartree = $.fn.zTree.getZTreeObj("car_monitor_tree")

            if(treeNode.children.length > 0){
                for(var item of treeNode.children){
                    var nodeid = item.id
                    var arrLeng = this.carTreeExpandPathArr.length
                    var index = this.carTreeExpandPathArr.indexOf(nodeid)

                    if(index != -1){
                        if(index < arrLeng - 1){
                            var nextnode = cartree.getNodeByParam("id", this.carTreeExpandPathArr[index], null)

                            if(nextnode){
                                cartree.expandNode(nextnode, true)
                            }
                        }else if(index == arrLeng - 1){
                            var nextnode1 = cartree.getNodeByParam("id", this.carTreeExpandPathArr[index], null)

                            cartree.cancelSelectedNode()

                            cartree.selectNode(nextnode1)
                        }
                    }
                }
            }
        },
        getCarTreeNodePath(data){
            var resStr = ""
            var obj = {
                carUuid: data.carUuid,
                treeType: 1
            }

            return api.carTreeNodePath(obj).then((response) =>{
                resStr = response.data
                return resStr
            }).catch(err =>{
                this.$message({
                    type: 'error',
                    duration: 1500,
                    showClose: true,
                    message: err.message
                });
            })

        },
        carTreeComplteInputSear(queryString, cb){               //车辆树输入框远程搜索
            var obj = {}

            if(queryString == ""){
                $('.el-autocomplete-suggestion__wrap').hide()
                $('.el-autocomplete-suggestion').hide()
            }else{
                $('.el-autocomplete-suggestion__wrap').show()
                $('.el-autocomplete-suggestion').show()
                $('.el-autocomplete-suggestion').width(152)
            }

            if(this.carTreeSearSelect == "carNo"){
                obj = {
                    field: 'carNo',
                    carNo: queryString,
                    treeType: 1
                }
            }else if(this.carTreeSearSelect == "carVin"){
                obj = {
                    field: 'carVin',
                    carVin: queryString,
                    treeType: 1
                }
            }else if(this.carTreeSearSelect == "tboxId"){
                obj = {
                    field: 'tboxId',
                    tboxId: queryString,
                    treeType: 1
                }
            }else if(this.carTreeSearSelect == 'actualSimNo'){
                obj = {
                    field: 'actualSimNo',
                    actualSimNo: queryString,
                    treeType: 1
                }
            }

            api.carTreeSearInput(obj).then((response) =>{
                if(response.data){
                    if(this.carTreeSearSelect == "carNo"){
                        for(let i of response.data){
                            if(i.carNo){
                                i.value = i.carNo
                            }
                        }
                    }else if(this.carTreeSearSelect == "carVin"){
                        for(let i of response.data){
                            if(i.carVin){
                                i.value = i.carVin
                            }
                        }
                    }else if(this.carTreeSearSelect == "tboxId"){
                        for(let i of response.data){
                            if(i.carNo){
                                i.value = i.tboxId
                            }
                        }
                    }else if(this.carTreeSearSelect == 'actualSimNo'){
                        for(let i of response.data){
                            if(i.actualSimNo){
                                i.value = i.actualSimNo
                            }
                        }
                    }
                    return cb(response.data)
                }else{
                    return cb([])
                }
            }).catch(err =>{
                this.$message({
                    type: 'error',
                    duration: 1500,
                    showClose: true,
                    message: err.message
                });
            })
        }
    }
}
</script>
<style scoped>
.car_monitor_right{
    margin-left: 20px;
    position: relative;
    /* padding: 16px 35px 0px 20px; */
    background: #ffffff;
}
.car_moni_tree_open{
    position: absolute;
    left: -2px;
    top: 50%;
    margin-top: -39px;
    cursor: pointer;
}
.car_moni_tree_close{
    position: absolute;
    left: -11px;
    top: 50%;
    margin-top: -39px;
    cursor: pointer;
}
.hq-map-style {
        height: 500px;
}
</style>




